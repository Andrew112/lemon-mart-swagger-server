openapi: 3.0.0
info:
  title: LemonMart
  description: LemonMart API
  version: "1.0.0"

servers:
  - url: https://api.example.com/v1
    description: Production environment
  - url: http://localhost:3000
    description: Local environment

definitions:
  Role:
    type: string
    enum: [clerk, cashier, manager]

  Name:
    first:
      type: string
    middle:
      type: string
    last:
      type: string

  User:
    type: object
    properties:
      id:
        type: string
      email:
        type: string
      name:
        $ref: '#/definitions/Name'
      picture:
        type: string
      role:
        $ref: '#/definitions/Role'
      userStatus:
        type: boolean
      lastModified:
        type: string
        format: date
      lastModifiedBy:
        type: string

  ArrayOfUser:
    type: array
    items:
          $ref: '#/definitions/User'

components:
  parameters:
    offsetParam: # <-- Arbitrary name for the definition that will be used to refer to it.
                  # Not necessarily the same as the parameter name.
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
      description: The number of items to skip before starting to collect the result set.
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: The numbers of items to return.

paths:
  /users:
    get:
      description: |
        Searches and returns `User` objects.
        Optional query params determines values of returned array
      parameters:
        - in: query
          name: search
          required: false
          schema:
            type: string
          description: Search text
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200': # Response
          description: OK
          content: # Response body
            application/json: # Media type
              schema:
                $ref: '#/definitions/ArrayOfUser'

  /user/{id}:
    get:
      description: Gets a `User` object by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User's unique id
      responses:
         '200': # Response
          description: OK
          content: # Response body
            application/json: # Media type
              schema:
                $ref: '#/definitions/User'
    put:
      description: Updates a `User` object given id
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: string
          description: User's unique id
        - in: query
          name: userData
          schema:
            $ref: '#/definitions/User'
          style: form
          explode: false
          description: Updated user object
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'